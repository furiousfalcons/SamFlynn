// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4328.SamFlynn.subsystems;

import org.usfirst.frc4328.SamFlynn.Robot;
import org.usfirst.frc4328.SamFlynn.RobotMap;
import org.usfirst.frc4328.SamFlynn.commands.CurveDrive;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

	//Drive stuff
    private final SpeedController left = RobotMap.driveTrainLeft;
    private final SpeedController right = RobotMap.driveTrainRight;

	private final DifferentialDrive driveTrain = RobotMap.driveTrain;
    
    //Sesors
    private final Ultrasonic ultrasonic = RobotMap.ultrasonic;
    private final AnalogGyro gyro = RobotMap.gyro;
    private final Encoder driveEncoder = RobotMap.driveEncoder;
    private final DigitalInput frontTrigger = RobotMap.frontTrigger;
    private final DigitalInput frontTop = RobotMap.frontTop;
    
    //Servos
    private final Servo cameraServo = RobotMap.cameraServo;
    
    
    @Override
    public void initDefaultCommand() {

        // Set the default command for a subsystem here.
        setDefaultCommand(new CurveDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void curveDrive() {
    	driveTrain.curvatureDrive(-Robot.oi.driver1.getY(), Robot.oi.driver1.getTwist(), Robot.oi.driver1.getTriggerPressed());
    }
    
    public void normalDrive() {
    	driveTrain.arcadeDrive(-Robot.oi.driver1.getY(), Robot.oi.driver1.getTwist());
    }
    
    public void normalDrive(double y, double z) {
    	driveTrain.arcadeDrive(y, z);
    }
    
    public void tankDrive(double leftSpeed, double rightSpeed) {
    	driveTrain.tankDrive(leftSpeed, rightSpeed);
    }
    
    public void stop() {
    	RobotMap.driveTrain.arcadeDrive(0.0,0.0);
    }
    
    public double getUltrasonic() {
    	return ultrasonic.getRangeInches();
    }

	public Encoder getDriveEncoder() {
		return driveEncoder;
	}
	
	public void moveCameraServo() {
		cameraServo.setAngle((-1*(Robot.oi.driver1.getRawAxis(3))*22.5)+157.5);
		SmartDashboard.putNumber("Camera Servo Angle", cameraServo.getAngle());
		SmartDashboard.putNumber("Camera Slider Thing", Robot.oi.driver1.getRawAxis(3));
	}
	
	public double getGyro() {
		return gyro.getAngle();
	}

}

